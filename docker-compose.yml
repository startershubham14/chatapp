services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: chatapp_db
    environment:
      POSTGRES_DB: chatapp
      POSTGRES_USER: chatapp_user
      POSTGRES_PASSWORD: chatapp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatapp_user -d chatapp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatapp_backend
    environment:
      - DATABASE_URL=postgresql://chatapp_user:chatapp_password@db:5432/chatapp
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - REDIS_URL=redis://redis:6379
      - ALLOWED_ORIGINS=http://localhost:3000,https://9428ed00d914.ngrok-free.app
      - CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
      - CLOUDINARY_API_KEY=your-cloudinary-api-key
      - CLOUDINARY_API_SECRET=your-cloudinary-api-secret
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Redis for session management and real-time features
  redis:
    image: redis:7-alpine
    container_name: chatapp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatapp_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    command: npm start

volumes:
  postgres_data:
  redis_data: